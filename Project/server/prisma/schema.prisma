generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id_user            Int               @id @default(autoincrement())
  username           String            @unique @db.VarChar(30)
  password           String            @db.VarChar(128)
  role               Roles             @default(STUDENT)
  userToken          UserToken[]
  tocSession         TOCSession[]
}

model UserToken {
  device_id          String
  refreshToken       String
  user_id            Int
  user               User              @relation(fields: [user_id], references: [id_user], onDelete: Cascade)
  @@id([user_id, device_id])
}

model TOCSession{
  id Int  @id @default(autoincrement())
  userId Int 
  statisticId Int @unique
  themeId Int 

  user User @relation(fields: [userId], references: [id_user])
  statistics Statistics @relation(fields: [statisticId], references: [id], onDelete: Cascade)
  theme Themes @relation(fields: [themeId], references: [id_theme], onDelete: Cascade)
}

model Statistics {
  id      Int               @id @default(autoincrement())
  rightAnswered Int               @default(0)
  mark  Int               @default(0)
  tocSession TOCSession?
}


model Subjects {
  id_subject         Int               @id @default(autoincrement())
  subjectName        String            @unique @db.VarChar(50)
  themes Themes[]
}

model Themes {
  id_theme           Int               @id @default(autoincrement())
  subject_id         Int
  themeName          String            @db.VarChar(50) @unique
  mode               Modes
  time               Int               @default(10)
  subjects           Subjects          @relation(fields: [subject_id],references: [id_subject],onDelete: Cascade, onUpdate: Cascade)
  tests              Tests[]
  openQuestions      OpenQuestions[]
  cards              Cards[]
  tocSession          TOCSession[]
}

model Tests {
  id_test            Int               @id @default(autoincrement())
  theme_id           Int
  question           String            @db.VarChar(200)
  optionA            String            @db.VarChar(50)
  optionB            String            @db.VarChar(50)
  optionC            String            @db.VarChar(50)
  optionD            String            @db.VarChar(50)
  correctAnswer      String            @db.VarChar(50)
  testName           String            @unique
           
  theme              Themes            @relation(fields: [theme_id],references: [id_theme],onDelete: Cascade, onUpdate: Cascade)
}

model OpenQuestions {
  id_openQuestion    Int               @id @default(autoincrement())
  theme_id           Int
  question           String            @db.VarChar(200)
  correctAnswer      String            @db.VarChar(50)
  openQuestionName   String            @unique
  theme              Themes            @relation(fields: [theme_id],references: [id_theme],onDelete: Cascade, onUpdate: Cascade)
}

model Cards {
  id_card            Int               @id @default(autoincrement())
  theme_id           Int
  word               String            @db.VarChar(50)
  correctAnswer      String            @db.VarChar(50)
  cardName           String            @unique
  theme              Themes            @relation(fields: [theme_id],references: [id_theme],onDelete: Cascade, onUpdate: Cascade)
}
enum Roles {
  ADMIN
  TEACHER
  STUDENT
}

enum Modes {
  TEST
  OPEN_QUESTION
  CARD
}