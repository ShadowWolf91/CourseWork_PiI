generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Subjects {
  id_subject        Int               @id @default(autoincrement())
  subjectName       String            @unique @db.VarChar(50)
  themes Themes[]
}

model Themes {
  id_theme          Int               @id @default(autoincrement())
  subject_id        Int
  themeName         String            @db.VarChar(50)
  mode              Modes
  questionAmount    Int
  subjects          Subjects          @relation(fields: [subject_id],references: [id_subject],onDelete: Cascade)
  tests             Tests[]
  openQuestions     OpenQuestions[]
  cards             Cards[]
}

model Tests {
  id_test           Int               @id @default(autoincrement())
  theme_id          Int
  question          String            @db.VarChar(200)
  optionA           String            @db.VarChar(50)
  optionB           String            @db.VarChar(50)
  optionC           String            @db.VarChar(50)
  optionD           String            @db.VarChar(50)
  correctAnswer     String            @db.VarChar(50)
  timeAmount        DateTime          @db.Time(0)
  theme             Themes            @relation(fields: [theme_id],references: [id_theme],onDelete: Cascade)
  statistics        Statistics[]
}

model OpenQuestions {
  id_openQustion    Int               @id @default(autoincrement())
  theme_id          Int
  question          String            @db.VarChar(200)
  correctAnswer     String            @db.VarChar(50)
  timeAmount        DateTime          @db.Time(0)
  theme             Themes            @relation(fields: [theme_id],references: [id_theme],onDelete: Cascade)
  statistics        Statistics[]
}

model Cards {
  id_card           Int               @id @default(autoincrement())
  theme_id          Int
  word              String            @db.VarChar(50)
  correctAnswer     String            @db.VarChar(50)
  timeAmount        DateTime          @db.Time(0)
  theme             Themes            @relation(fields: [theme_id],references: [id_theme],onDelete: Cascade)
  statistics        Statistics[]
}

model User {
  id_user           Int               @id @default(autoincrement())
  username          String            @unique @db.VarChar(30)
  password          String            @db.VarChar(128)
  role              Roles             @default(DEFAULT)
  token             String
  statistics        Statistics[]
}

model Statistics {
  id_statistics     Int               @id @default(autoincrement())
  rightAnswered     Int               @default(0)
  score             Int               @default(0)
  mark              Int               @default(0)
  user_id           Int
  test_id           Int
  openQuestion_id   Int
  card_id           Int
  user              User              @relation(fields: [user_id],references: [id_user],onDelete: Cascade)
  tests             Tests             @relation(fields: [test_id],references: [id_test],onDelete: Cascade)
  openQuestions     OpenQuestions     @relation(fields: [openQuestion_id],references: [id_openQustion],onDelete: Cascade)
  cards             Cards             @relation(fields: [card_id],references: [id_card],onDelete: Cascade)
}

enum Roles {
  ADMIN
  TEACHER
  DEFAULT
}

enum Modes {
  TEST
  OPEN_QUESTION
  CARD
}